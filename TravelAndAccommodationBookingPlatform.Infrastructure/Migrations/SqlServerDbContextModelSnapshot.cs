// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAndAccommodationBookingPlatform.Infrastructure.Data;

#nullable disable

namespace TravelAndAccommodationBookingPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    partial class SqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "France",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(1963),
                            Name = "Paris",
                            PostOffice = "75000",
                            Thumbnail = "paris.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Japan",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(1967),
                            Name = "Tokyo",
                            PostOffice = "100-0001",
                            Thumbnail = "tokyo.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(1969),
                            Name = "New York",
                            PostOffice = "10001",
                            Thumbnail = "nyc.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Italy",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(1970),
                            Name = "Rome",
                            PostOffice = "00100",
                            Thumbnail = "rome.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Spain",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(1972),
                            Name = "Barcelona",
                            PostOffice = "08001",
                            Thumbnail = "barcelona.jpg"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2263),
                            Description = "Near Eiffel Tower",
                            Name = "Eiffel Hotel",
                            Thumbnail = "eiffel_hotel.jpg",
                            UpdatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2264)
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2266),
                            Description = "In the heart of Tokyo",
                            Name = "Shibuya Inn",
                            Thumbnail = "shibuya_inn.jpg",
                            UpdatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2266)
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2268),
                            Description = "Close to Broadway",
                            Name = "Times Square Hotel",
                            Thumbnail = "ts_hotel.jpg",
                            UpdatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2268)
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2270),
                            Description = "View of the Colosseum",
                            Name = "Colosseum Suites",
                            Thumbnail = "colosseum.jpg",
                            UpdatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2270)
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2271),
                            Description = "Near Gaudi's masterpiece",
                            Name = "Sagrada Familia Hotel",
                            Thumbnail = "sagrada.jpg",
                            UpdatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2272)
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Location", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("HotelId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            Latitude = 48.8566f,
                            Longitude = 2.3522f
                        },
                        new
                        {
                            HotelId = 2,
                            Latitude = 35.6895f,
                            Longitude = 139.6917f
                        },
                        new
                        {
                            HotelId = 3,
                            Latitude = 40.7128f,
                            Longitude = -74.006f
                        },
                        new
                        {
                            HotelId = 4,
                            Latitude = 41.9028f,
                            Longitude = 12.4964f
                        },
                        new
                        {
                            HotelId = 5,
                            Latitude = 41.3851f,
                            Longitude = 2.1734f
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("BookPrice")
                        .HasColumnType("real");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Review", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rate")
                        .HasColumnType("real");

                    b.HasKey("UserId", "HotelId");

                    b.HasIndex("HotelId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomRoomTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = "Available",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2297),
                            HotelId = 1,
                            Price = 120f,
                            RoomType = 1
                        },
                        new
                        {
                            Id = 2,
                            Availability = "Available",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2298),
                            HotelId = 2,
                            Price = 200f,
                            RoomType = 6
                        },
                        new
                        {
                            Id = 3,
                            Availability = "Available",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2300),
                            HotelId = 3,
                            Price = 300f,
                            RoomType = 4
                        },
                        new
                        {
                            Id = 4,
                            Availability = "Available",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2301),
                            HotelId = 4,
                            Price = 100f,
                            RoomType = 1
                        },
                        new
                        {
                            Id = 5,
                            Availability = "Available",
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2302),
                            HotelId = 5,
                            Price = 180f,
                            RoomType = 6
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2235),
                            Email = "alice@example.com",
                            Password = "pass123",
                            Role = 1,
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2237),
                            Email = "bob@example.com",
                            Password = "pass123",
                            Role = 1,
                            Username = "bob"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2239),
                            Email = "carol@example.com",
                            Password = "pass123",
                            Role = 1,
                            Username = "carol"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2240),
                            Email = "dave@example.com",
                            Password = "pass123",
                            Role = 1,
                            Username = "dave"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 27, 22, 4, DateTimeKind.Utc).AddTicks(2241),
                            Email = "eve@example.com",
                            Password = "pass123",
                            Role = 1,
                            Username = "eve"
                        });
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Location", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", "Hotel")
                        .WithOne("Location")
                        .HasForeignKey("TravelAndAccommodationBookingPlatform.Domain.Entities.Location", "HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Review", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Room", b =>
                {
                    b.HasOne("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("TravelAndAccommodationBookingPlatform.Domain.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
